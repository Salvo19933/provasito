name: Update site every hour # Nome del tuo workflow, visibile nella tab GitHub Actions

on:
  schedule:
    - cron: '0 * * * *'  # Questa espressione cron significa "al minuto 0 di ogni ora"
  workflow_dispatch:     # Permette di attivare manualmente il workflow dalla tab GitHub Actions

jobs:
  build:
    runs-on: ubuntu-latest # Specifica l'ambiente del runner

    steps:
      - name: Checkout repository # Step per clonare la tua repository
        uses: actions/checkout@v3 # Usa la versione 3 raccomandata dell'action checkout
        with:
          # Questo token è fornito automaticamente da GitHub e ha i permessi per pushare
          token: ${{ secrets.GITHUB_TOKEN }} 

      - name: Set up Python # Step per configurare l'ambiente Python
        uses: actions/setup-python@v4 # Usa la versione 4 raccomandata dell'action setup-python
        with:
          python-version: '3.x' # Specifica Python 3.x

      - name: Install dependencies # Step per installare le librerie Python necessarie a main.py
        run: pip install requests beautifulsoup4

      - name: Run Python script to generate index.html # Step per eseguire il tuo script Python
        run: python main.py

      - name: Configure Git # Step per configurare l'utente Git per i commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"
        # Il user.name e user.email sono impostati per il bot che farà il commit

      - name: Check for changes and commit # Step per aggiungere, commettere e verificare le modifiche
        id: commit_step # Assegna un ID a questo step per riferire i suoi output in seguito
        run: |
          git add index.html # Aggiungi l'index.html generato allo staging
          
          # Verifica se ci sono effettive modifiche staged prima di tentare un commit
          # 'git diff --staged --quiet' restituisce 0 se non ci sono modifiche, 1 se ci sono
          if git diff --staged --quiet; then
            echo "Nessuna modifica da commettere in index.html, salta il commit e il push."
            echo "committed=false" >> $GITHUB_OUTPUT # Imposta l'output a false usando GITHUB_OUTPUT
          else
            # Tenta il commit se ci sono modifiche staged
            git commit -m "Auto-update $(date +'%Y-%m-%d %H:%M')"
            
            # Verifica se il comando 'git commit' è stato effettivamente riuscito
            if [ $? -eq 0 ]; then
              echo "Modifiche commesse con successo."
              echo "committed=true" >> $GITHUB_OUTPUT # Imposta l'output a true usando GITHUB_OUTPUT
            else
              # Questo caso è raro dopo il controllo 'git diff --staged --quiet',
              # ma lo gestiamo per robustezza.
              echo "Errore durante il commit. Salta il push."
              echo "committed=false" >> $GITHUB_OUTPUT
            fi
          fi
        shell: bash # Assicura che bash sia usato per questo comando multi-linea

      - name: Push changes to GitHub # Step per pushare le modifiche commesse
        # Questo step verrà eseguito solo se l'output 'committed' dello step 'commit_step' era 'true'
        if: steps.commit_step.outputs.committed == 'true'
        run: git push
